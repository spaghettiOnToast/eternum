schema {
  query: World__Query
  subscription: World__Subscription
}

scalar ContractAddress

scalar Cursor

scalar DateTime

type ERC20__Token {
  amount: String!
  contractAddress: String!
  decimals: String!
  name: String!
  symbol: String!
}

type ERC721__Token {
  contractAddress: String!
  imagePath: String!
  metadata: String!
  metadataAttributes: String!
  metadataDescription: String!
  metadataName: String!
  name: String!
  symbol: String!
  tokenId: String!
}

union ERC__Token = ERC20__Token | ERC721__Token

scalar Enum

union ModelUnion = darkshuffle_Battle | darkshuffle_BattleEffects | darkshuffle_Board | darkshuffle_Donation | darkshuffle_Draft | darkshuffle_Game | darkshuffle_GameEffects | darkshuffle_Leaderboard | darkshuffle_Map | darkshuffle_PlayerReward | darkshuffle_Season

enum OrderDirection {
  ASC
  DESC
}

type Token__Balance {
  tokenMetadata: ERC__Token!
}

type Token__BalanceConnection {
  edges: [Token__BalanceEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type Token__BalanceEdge {
  cursor: Cursor
  node: Token__Balance
}

type Token__Transfer {
  executedAt: String!
  from: String!
  to: String!
  tokenMetadata: ERC__Token!
  transactionHash: String!
}

type Token__TransferConnection {
  edges: [Token__TransferEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type Token__TransferEdge {
  cursor: Cursor
  node: Token__Transfer
}

type World__Content {
  coverUri: String
  description: String
  iconUri: String
  name: String
  socials: [World__Social]
  website: String
}

type World__Entity {
  createdAt: DateTime
  eventId: String
  executedAt: DateTime
  id: ID
  keys: [String]
  models: [ModelUnion]
  updatedAt: DateTime
}

type World__EntityConnection {
  edges: [World__EntityEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type World__EntityEdge {
  cursor: Cursor
  node: World__Entity
}

type World__Event {
  createdAt: DateTime
  data: [String]
  executedAt: DateTime
  id: ID
  keys: [String]
  transactionHash: String
}

type World__EventConnection {
  edges: [World__EventEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type World__EventEdge {
  cursor: Cursor
  node: World__Event
}

type World__EventMessage {
  createdAt: DateTime
  eventId: String
  executedAt: DateTime
  id: ID
  keys: [String]
  models: [ModelUnion]
  updatedAt: DateTime
}

type World__EventMessageConnection {
  edges: [World__EventMessageEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type World__EventMessageEdge {
  cursor: Cursor
  node: World__EventMessage
}

type World__Metadata {
  content: World__Content
  coverImg: String
  createdAt: DateTime
  executedAt: DateTime
  iconImg: String
  id: ID
  updatedAt: DateTime
  uri: String
  worldAddress: String!
}

type World__MetadataConnection {
  edges: [World__MetadataEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type World__MetadataEdge {
  cursor: Cursor
  node: World__Metadata
}

type World__Model {
  classHash: felt252
  contractAddress: felt252
  createdAt: DateTime
  executedAt: DateTime
  id: ID
  name: String
  namespace: String
  transactionHash: felt252
}

type World__ModelConnection {
  edges: [World__ModelEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type World__ModelEdge {
  cursor: Cursor
  node: World__Model
}

input World__ModelOrder {
  direction: OrderDirection!
  field: World__ModelOrderField!
}

enum World__ModelOrderField {
  CLASS_HASH
  NAME
}

type World__PageInfo {
  endCursor: Cursor
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: Cursor
}

type World__Query {
  darkshuffleBattleEffectsModels(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int, order: darkshuffle_BattleEffectsOrder, where: darkshuffle_BattleEffectsWhereInput): darkshuffle_BattleEffectsConnection
  darkshuffleBattleModels(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int, order: darkshuffle_BattleOrder, where: darkshuffle_BattleWhereInput): darkshuffle_BattleConnection
  darkshuffleBoardModels(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int, order: darkshuffle_BoardOrder, where: darkshuffle_BoardWhereInput): darkshuffle_BoardConnection
  darkshuffleDonationModels(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int, order: darkshuffle_DonationOrder, where: darkshuffle_DonationWhereInput): darkshuffle_DonationConnection
  darkshuffleDraftModels(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int, order: darkshuffle_DraftOrder, where: darkshuffle_DraftWhereInput): darkshuffle_DraftConnection
  darkshuffleGameEffectsModels(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int, order: darkshuffle_GameEffectsOrder, where: darkshuffle_GameEffectsWhereInput): darkshuffle_GameEffectsConnection
  darkshuffleGameModels(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int, order: darkshuffle_GameOrder, where: darkshuffle_GameWhereInput): darkshuffle_GameConnection
  darkshuffleLeaderboardModels(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int, order: darkshuffle_LeaderboardOrder, where: darkshuffle_LeaderboardWhereInput): darkshuffle_LeaderboardConnection
  darkshuffleMapModels(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int, order: darkshuffle_MapOrder, where: darkshuffle_MapWhereInput): darkshuffle_MapConnection
  darkshufflePlayerRewardModels(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int, order: darkshuffle_PlayerRewardOrder, where: darkshuffle_PlayerRewardWhereInput): darkshuffle_PlayerRewardConnection
  darkshuffleSeasonModels(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int, order: darkshuffle_SeasonOrder, where: darkshuffle_SeasonWhereInput): darkshuffle_SeasonConnection
  entities(after: Cursor, before: Cursor, first: Int, keys: [String], last: Int, limit: Int, offset: Int): World__EntityConnection
  entity(id: ID!): World__Entity!
  eventMessage(id: ID!): World__EventMessage!
  eventMessages(after: Cursor, before: Cursor, first: Int, keys: [String], last: Int, limit: Int, offset: Int): World__EventMessageConnection
  events(after: Cursor, before: Cursor, first: Int, keys: [String], last: Int, limit: Int, offset: Int): World__EventConnection
  metadatas(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int): World__MetadataConnection
  model(id: ID!): World__Model!
  models(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int, order: World__ModelOrder): World__ModelConnection
  tokenBalances(accountAddress: String!, after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int): Token__BalanceConnection
  tokenTransfers(accountAddress: String!, after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int): Token__TransferConnection
  transaction(transactionHash: ID!): World__Transaction!
  transactions(after: Cursor, before: Cursor, first: Int, last: Int, limit: Int, offset: Int): World__TransactionConnection
}

type World__Social {
  name: String
  url: String
}

type World__Subscription {
  entityUpdated(id: ID): World__Entity!
  eventEmitted(keys: [String]): World__Event!
  eventMessageUpdated(id: ID): World__EventMessage!
  modelRegistered(id: ID): World__Model!
}

type World__Transaction {
  calldata: [felt252]
  createdAt: DateTime
  executedAt: DateTime
  id: ID
  maxFee: felt252
  nonce: felt252
  senderAddress: felt252
  signature: [felt252]
  transactionHash: felt252
}

type World__TransactionConnection {
  edges: [World__TransactionEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type World__TransactionEdge {
  cursor: Cursor
  node: World__Transaction
}

scalar bool

type darkshuffle_Battle {
  battle_id: u32
  deck: [u8]
  deck_index: u8
  entity: World__Entity
  eventMessage: World__EventMessage
  game_id: u32
  hand: [u8]
  hero_energy: u8
  hero_health: u8
  monster_attack: u8
  monster_health: u8
  monster_id: u8
  monster_type: Enum
  round: u8
}

type darkshuffle_BattleConnection {
  edges: [darkshuffle_BattleEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type darkshuffle_BattleEdge {
  cursor: Cursor
  node: darkshuffle_Battle
}

type darkshuffle_BattleEffects {
  battle_id: u32
  enemy_marks: u8
  entity: World__Entity
  eventMessage: World__EventMessage
  hero_dmg_reduction: u8
  next_brute_attack_bonus: u8
  next_brute_health_bonus: u8
  next_hunter_attack_bonus: u8
  next_hunter_health_bonus: u8
}

type darkshuffle_BattleEffectsConnection {
  edges: [darkshuffle_BattleEffectsEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type darkshuffle_BattleEffectsEdge {
  cursor: Cursor
  node: darkshuffle_BattleEffects
}

input darkshuffle_BattleEffectsOrder {
  direction: OrderDirection!
  field: darkshuffle_BattleEffectsOrderField!
}

enum darkshuffle_BattleEffectsOrderField {
  BATTLE_ID
  ENEMY_MARKS
  HERO_DMG_REDUCTION
  NEXT_BRUTE_ATTACK_BONUS
  NEXT_BRUTE_HEALTH_BONUS
  NEXT_HUNTER_ATTACK_BONUS
  NEXT_HUNTER_HEALTH_BONUS
}

input darkshuffle_BattleEffectsWhereInput {
  battle_id: u32
  battle_idEQ: u32
  battle_idGT: u32
  battle_idGTE: u32
  battle_idIN: [u32]
  battle_idLIKE: u32
  battle_idLT: u32
  battle_idLTE: u32
  battle_idNEQ: u32
  battle_idNOTIN: [u32]
  battle_idNOTLIKE: u32
  enemy_marks: u8
  enemy_marksEQ: u8
  enemy_marksGT: u8
  enemy_marksGTE: u8
  enemy_marksIN: [u8]
  enemy_marksLIKE: u8
  enemy_marksLT: u8
  enemy_marksLTE: u8
  enemy_marksNEQ: u8
  enemy_marksNOTIN: [u8]
  enemy_marksNOTLIKE: u8
  hero_dmg_reduction: u8
  hero_dmg_reductionEQ: u8
  hero_dmg_reductionGT: u8
  hero_dmg_reductionGTE: u8
  hero_dmg_reductionIN: [u8]
  hero_dmg_reductionLIKE: u8
  hero_dmg_reductionLT: u8
  hero_dmg_reductionLTE: u8
  hero_dmg_reductionNEQ: u8
  hero_dmg_reductionNOTIN: [u8]
  hero_dmg_reductionNOTLIKE: u8
  next_brute_attack_bonus: u8
  next_brute_attack_bonusEQ: u8
  next_brute_attack_bonusGT: u8
  next_brute_attack_bonusGTE: u8
  next_brute_attack_bonusIN: [u8]
  next_brute_attack_bonusLIKE: u8
  next_brute_attack_bonusLT: u8
  next_brute_attack_bonusLTE: u8
  next_brute_attack_bonusNEQ: u8
  next_brute_attack_bonusNOTIN: [u8]
  next_brute_attack_bonusNOTLIKE: u8
  next_brute_health_bonus: u8
  next_brute_health_bonusEQ: u8
  next_brute_health_bonusGT: u8
  next_brute_health_bonusGTE: u8
  next_brute_health_bonusIN: [u8]
  next_brute_health_bonusLIKE: u8
  next_brute_health_bonusLT: u8
  next_brute_health_bonusLTE: u8
  next_brute_health_bonusNEQ: u8
  next_brute_health_bonusNOTIN: [u8]
  next_brute_health_bonusNOTLIKE: u8
  next_hunter_attack_bonus: u8
  next_hunter_attack_bonusEQ: u8
  next_hunter_attack_bonusGT: u8
  next_hunter_attack_bonusGTE: u8
  next_hunter_attack_bonusIN: [u8]
  next_hunter_attack_bonusLIKE: u8
  next_hunter_attack_bonusLT: u8
  next_hunter_attack_bonusLTE: u8
  next_hunter_attack_bonusNEQ: u8
  next_hunter_attack_bonusNOTIN: [u8]
  next_hunter_attack_bonusNOTLIKE: u8
  next_hunter_health_bonus: u8
  next_hunter_health_bonusEQ: u8
  next_hunter_health_bonusGT: u8
  next_hunter_health_bonusGTE: u8
  next_hunter_health_bonusIN: [u8]
  next_hunter_health_bonusLIKE: u8
  next_hunter_health_bonusLT: u8
  next_hunter_health_bonusLTE: u8
  next_hunter_health_bonusNEQ: u8
  next_hunter_health_bonusNOTIN: [u8]
  next_hunter_health_bonusNOTLIKE: u8
}

input darkshuffle_BattleOrder {
  direction: OrderDirection!
  field: darkshuffle_BattleOrderField!
}

enum darkshuffle_BattleOrderField {
  BATTLE_ID
  DECK
  DECK_INDEX
  GAME_ID
  HAND
  HERO_ENERGY
  HERO_HEALTH
  MONSTER_ATTACK
  MONSTER_HEALTH
  MONSTER_ID
  MONSTER_TYPE
  ROUND
}

input darkshuffle_BattleWhereInput {
  battle_id: u32
  battle_idEQ: u32
  battle_idGT: u32
  battle_idGTE: u32
  battle_idIN: [u32]
  battle_idLIKE: u32
  battle_idLT: u32
  battle_idLTE: u32
  battle_idNEQ: u32
  battle_idNOTIN: [u32]
  battle_idNOTLIKE: u32
  deck_index: u8
  deck_indexEQ: u8
  deck_indexGT: u8
  deck_indexGTE: u8
  deck_indexIN: [u8]
  deck_indexLIKE: u8
  deck_indexLT: u8
  deck_indexLTE: u8
  deck_indexNEQ: u8
  deck_indexNOTIN: [u8]
  deck_indexNOTLIKE: u8
  game_id: u32
  game_idEQ: u32
  game_idGT: u32
  game_idGTE: u32
  game_idIN: [u32]
  game_idLIKE: u32
  game_idLT: u32
  game_idLTE: u32
  game_idNEQ: u32
  game_idNOTIN: [u32]
  game_idNOTLIKE: u32
  hero_energy: u8
  hero_energyEQ: u8
  hero_energyGT: u8
  hero_energyGTE: u8
  hero_energyIN: [u8]
  hero_energyLIKE: u8
  hero_energyLT: u8
  hero_energyLTE: u8
  hero_energyNEQ: u8
  hero_energyNOTIN: [u8]
  hero_energyNOTLIKE: u8
  hero_health: u8
  hero_healthEQ: u8
  hero_healthGT: u8
  hero_healthGTE: u8
  hero_healthIN: [u8]
  hero_healthLIKE: u8
  hero_healthLT: u8
  hero_healthLTE: u8
  hero_healthNEQ: u8
  hero_healthNOTIN: [u8]
  hero_healthNOTLIKE: u8
  monster_attack: u8
  monster_attackEQ: u8
  monster_attackGT: u8
  monster_attackGTE: u8
  monster_attackIN: [u8]
  monster_attackLIKE: u8
  monster_attackLT: u8
  monster_attackLTE: u8
  monster_attackNEQ: u8
  monster_attackNOTIN: [u8]
  monster_attackNOTLIKE: u8
  monster_health: u8
  monster_healthEQ: u8
  monster_healthGT: u8
  monster_healthGTE: u8
  monster_healthIN: [u8]
  monster_healthLIKE: u8
  monster_healthLT: u8
  monster_healthLTE: u8
  monster_healthNEQ: u8
  monster_healthNOTIN: [u8]
  monster_healthNOTLIKE: u8
  monster_id: u8
  monster_idEQ: u8
  monster_idGT: u8
  monster_idGTE: u8
  monster_idIN: [u8]
  monster_idLIKE: u8
  monster_idLT: u8
  monster_idLTE: u8
  monster_idNEQ: u8
  monster_idNOTIN: [u8]
  monster_idNOTLIKE: u8
  monster_type: Enum
  round: u8
  roundEQ: u8
  roundGT: u8
  roundGTE: u8
  roundIN: [u8]
  roundLIKE: u8
  roundLT: u8
  roundLTE: u8
  roundNEQ: u8
  roundNOTIN: [u8]
  roundNOTLIKE: u8
}

type darkshuffle_Board {
  battle_id: u32
  creature1: darkshuffle_Board_Creature
  creature2: darkshuffle_Board_Creature
  creature3: darkshuffle_Board_Creature
  creature4: darkshuffle_Board_Creature
  creature5: darkshuffle_Board_Creature
  creature6: darkshuffle_Board_Creature
  entity: World__Entity
  eventMessage: World__EventMessage
}

type darkshuffle_BoardConnection {
  edges: [darkshuffle_BoardEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type darkshuffle_BoardEdge {
  cursor: Cursor
  node: darkshuffle_Board
}

input darkshuffle_BoardOrder {
  direction: OrderDirection!
  field: darkshuffle_BoardOrderField!
}

enum darkshuffle_BoardOrderField {
  BATTLE_ID
  CREATURE1
  CREATURE2
  CREATURE3
  CREATURE4
  CREATURE5
  CREATURE6
}

input darkshuffle_BoardWhereInput {
  battle_id: u32
  battle_idEQ: u32
  battle_idGT: u32
  battle_idGTE: u32
  battle_idIN: [u32]
  battle_idLIKE: u32
  battle_idLT: u32
  battle_idLTE: u32
  battle_idNEQ: u32
  battle_idNOTIN: [u32]
  battle_idNOTLIKE: u32
}

type darkshuffle_Board_Creature {
  attack: u8
  card_id: u8
  cost: u8
  creature_type: Enum
  health: u8
}

type darkshuffle_Donation {
  address: ContractAddress
  amount: u256
  entity: World__Entity
  eventMessage: World__EventMessage
  name: felt252
  season_id: u32
  social: felt252
}

type darkshuffle_DonationConnection {
  edges: [darkshuffle_DonationEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type darkshuffle_DonationEdge {
  cursor: Cursor
  node: darkshuffle_Donation
}

input darkshuffle_DonationOrder {
  direction: OrderDirection!
  field: darkshuffle_DonationOrderField!
}

enum darkshuffle_DonationOrderField {
  ADDRESS
  AMOUNT
  NAME
  SEASON_ID
  SOCIAL
}

input darkshuffle_DonationWhereInput {
  address: ContractAddress
  addressEQ: ContractAddress
  addressGT: ContractAddress
  addressGTE: ContractAddress
  addressIN: [ContractAddress]
  addressLIKE: ContractAddress
  addressLT: ContractAddress
  addressLTE: ContractAddress
  addressNEQ: ContractAddress
  addressNOTIN: [ContractAddress]
  addressNOTLIKE: ContractAddress
  amount: u256
  amountEQ: u256
  amountGT: u256
  amountGTE: u256
  amountIN: [u256]
  amountLIKE: u256
  amountLT: u256
  amountLTE: u256
  amountNEQ: u256
  amountNOTIN: [u256]
  amountNOTLIKE: u256
  name: felt252
  nameEQ: felt252
  nameGT: felt252
  nameGTE: felt252
  nameIN: [felt252]
  nameLIKE: felt252
  nameLT: felt252
  nameLTE: felt252
  nameNEQ: felt252
  nameNOTIN: [felt252]
  nameNOTLIKE: felt252
  season_id: u32
  season_idEQ: u32
  season_idGT: u32
  season_idGTE: u32
  season_idIN: [u32]
  season_idLIKE: u32
  season_idLT: u32
  season_idLTE: u32
  season_idNEQ: u32
  season_idNOTIN: [u32]
  season_idNOTLIKE: u32
  social: felt252
  socialEQ: felt252
  socialGT: felt252
  socialGTE: felt252
  socialIN: [felt252]
  socialLIKE: felt252
  socialLT: felt252
  socialLTE: felt252
  socialNEQ: felt252
  socialNOTIN: [felt252]
  socialNOTLIKE: felt252
}

type darkshuffle_Draft {
  cards: [u8]
  entity: World__Entity
  eventMessage: World__EventMessage
  game_id: u32
  options: [u8]
}

type darkshuffle_DraftConnection {
  edges: [darkshuffle_DraftEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type darkshuffle_DraftEdge {
  cursor: Cursor
  node: darkshuffle_Draft
}

input darkshuffle_DraftOrder {
  direction: OrderDirection!
  field: darkshuffle_DraftOrderField!
}

enum darkshuffle_DraftOrderField {
  CARDS
  GAME_ID
  OPTIONS
}

input darkshuffle_DraftWhereInput {
  game_id: u32
  game_idEQ: u32
  game_idGT: u32
  game_idGTE: u32
  game_idIN: [u32]
  game_idLIKE: u32
  game_idLT: u32
  game_idLTE: u32
  game_idNEQ: u32
  game_idNOTIN: [u32]
  game_idNOTLIKE: u32
}

type darkshuffle_Game {
  active: bool
  active_battle_id: u32
  entity: World__Entity
  eventMessage: World__EventMessage
  game_id: u32
  hero_health: u8
  hero_xp: u16
  in_battle: bool
  in_draft: bool
  last_node_id: u8
  map_depth: u8
  map_level: u8
  monsters_slain: u16
  player: ContractAddress
  player_name: felt252
  season_id: u32
}

type darkshuffle_GameConnection {
  edges: [darkshuffle_GameEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type darkshuffle_GameEdge {
  cursor: Cursor
  node: darkshuffle_Game
}

type darkshuffle_GameEffects {
  all_attack: u8
  brute_attack: u8
  brute_health: u8
  card_draw: u8
  entity: World__Entity
  eventMessage: World__EventMessage
  first_attack: u8
  first_cost: u8
  first_health: u8
  game_id: u32
  hero_card_heal: bool
  hero_dmg_reduction: u8
  hunter_attack: u8
  hunter_health: u8
  magical_attack: u8
  magical_health: u8
  play_creature_heal: u8
  start_bonus_energy: u8
}

type darkshuffle_GameEffectsConnection {
  edges: [darkshuffle_GameEffectsEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type darkshuffle_GameEffectsEdge {
  cursor: Cursor
  node: darkshuffle_GameEffects
}

input darkshuffle_GameEffectsOrder {
  direction: OrderDirection!
  field: darkshuffle_GameEffectsOrderField!
}

enum darkshuffle_GameEffectsOrderField {
  ALL_ATTACK
  BRUTE_ATTACK
  BRUTE_HEALTH
  CARD_DRAW
  FIRST_ATTACK
  FIRST_COST
  FIRST_HEALTH
  GAME_ID
  HERO_CARD_HEAL
  HERO_DMG_REDUCTION
  HUNTER_ATTACK
  HUNTER_HEALTH
  MAGICAL_ATTACK
  MAGICAL_HEALTH
  PLAY_CREATURE_HEAL
  START_BONUS_ENERGY
}

input darkshuffle_GameEffectsWhereInput {
  all_attack: u8
  all_attackEQ: u8
  all_attackGT: u8
  all_attackGTE: u8
  all_attackIN: [u8]
  all_attackLIKE: u8
  all_attackLT: u8
  all_attackLTE: u8
  all_attackNEQ: u8
  all_attackNOTIN: [u8]
  all_attackNOTLIKE: u8
  brute_attack: u8
  brute_attackEQ: u8
  brute_attackGT: u8
  brute_attackGTE: u8
  brute_attackIN: [u8]
  brute_attackLIKE: u8
  brute_attackLT: u8
  brute_attackLTE: u8
  brute_attackNEQ: u8
  brute_attackNOTIN: [u8]
  brute_attackNOTLIKE: u8
  brute_health: u8
  brute_healthEQ: u8
  brute_healthGT: u8
  brute_healthGTE: u8
  brute_healthIN: [u8]
  brute_healthLIKE: u8
  brute_healthLT: u8
  brute_healthLTE: u8
  brute_healthNEQ: u8
  brute_healthNOTIN: [u8]
  brute_healthNOTLIKE: u8
  card_draw: u8
  card_drawEQ: u8
  card_drawGT: u8
  card_drawGTE: u8
  card_drawIN: [u8]
  card_drawLIKE: u8
  card_drawLT: u8
  card_drawLTE: u8
  card_drawNEQ: u8
  card_drawNOTIN: [u8]
  card_drawNOTLIKE: u8
  first_attack: u8
  first_attackEQ: u8
  first_attackGT: u8
  first_attackGTE: u8
  first_attackIN: [u8]
  first_attackLIKE: u8
  first_attackLT: u8
  first_attackLTE: u8
  first_attackNEQ: u8
  first_attackNOTIN: [u8]
  first_attackNOTLIKE: u8
  first_cost: u8
  first_costEQ: u8
  first_costGT: u8
  first_costGTE: u8
  first_costIN: [u8]
  first_costLIKE: u8
  first_costLT: u8
  first_costLTE: u8
  first_costNEQ: u8
  first_costNOTIN: [u8]
  first_costNOTLIKE: u8
  first_health: u8
  first_healthEQ: u8
  first_healthGT: u8
  first_healthGTE: u8
  first_healthIN: [u8]
  first_healthLIKE: u8
  first_healthLT: u8
  first_healthLTE: u8
  first_healthNEQ: u8
  first_healthNOTIN: [u8]
  first_healthNOTLIKE: u8
  game_id: u32
  game_idEQ: u32
  game_idGT: u32
  game_idGTE: u32
  game_idIN: [u32]
  game_idLIKE: u32
  game_idLT: u32
  game_idLTE: u32
  game_idNEQ: u32
  game_idNOTIN: [u32]
  game_idNOTLIKE: u32
  hero_card_heal: bool
  hero_dmg_reduction: u8
  hero_dmg_reductionEQ: u8
  hero_dmg_reductionGT: u8
  hero_dmg_reductionGTE: u8
  hero_dmg_reductionIN: [u8]
  hero_dmg_reductionLIKE: u8
  hero_dmg_reductionLT: u8
  hero_dmg_reductionLTE: u8
  hero_dmg_reductionNEQ: u8
  hero_dmg_reductionNOTIN: [u8]
  hero_dmg_reductionNOTLIKE: u8
  hunter_attack: u8
  hunter_attackEQ: u8
  hunter_attackGT: u8
  hunter_attackGTE: u8
  hunter_attackIN: [u8]
  hunter_attackLIKE: u8
  hunter_attackLT: u8
  hunter_attackLTE: u8
  hunter_attackNEQ: u8
  hunter_attackNOTIN: [u8]
  hunter_attackNOTLIKE: u8
  hunter_health: u8
  hunter_healthEQ: u8
  hunter_healthGT: u8
  hunter_healthGTE: u8
  hunter_healthIN: [u8]
  hunter_healthLIKE: u8
  hunter_healthLT: u8
  hunter_healthLTE: u8
  hunter_healthNEQ: u8
  hunter_healthNOTIN: [u8]
  hunter_healthNOTLIKE: u8
  magical_attack: u8
  magical_attackEQ: u8
  magical_attackGT: u8
  magical_attackGTE: u8
  magical_attackIN: [u8]
  magical_attackLIKE: u8
  magical_attackLT: u8
  magical_attackLTE: u8
  magical_attackNEQ: u8
  magical_attackNOTIN: [u8]
  magical_attackNOTLIKE: u8
  magical_health: u8
  magical_healthEQ: u8
  magical_healthGT: u8
  magical_healthGTE: u8
  magical_healthIN: [u8]
  magical_healthLIKE: u8
  magical_healthLT: u8
  magical_healthLTE: u8
  magical_healthNEQ: u8
  magical_healthNOTIN: [u8]
  magical_healthNOTLIKE: u8
  play_creature_heal: u8
  play_creature_healEQ: u8
  play_creature_healGT: u8
  play_creature_healGTE: u8
  play_creature_healIN: [u8]
  play_creature_healLIKE: u8
  play_creature_healLT: u8
  play_creature_healLTE: u8
  play_creature_healNEQ: u8
  play_creature_healNOTIN: [u8]
  play_creature_healNOTLIKE: u8
  start_bonus_energy: u8
  start_bonus_energyEQ: u8
  start_bonus_energyGT: u8
  start_bonus_energyGTE: u8
  start_bonus_energyIN: [u8]
  start_bonus_energyLIKE: u8
  start_bonus_energyLT: u8
  start_bonus_energyLTE: u8
  start_bonus_energyNEQ: u8
  start_bonus_energyNOTIN: [u8]
  start_bonus_energyNOTLIKE: u8
}

input darkshuffle_GameOrder {
  direction: OrderDirection!
  field: darkshuffle_GameOrderField!
}

enum darkshuffle_GameOrderField {
  ACTIVE
  ACTIVE_BATTLE_ID
  GAME_ID
  HERO_HEALTH
  HERO_XP
  IN_BATTLE
  IN_DRAFT
  LAST_NODE_ID
  MAP_DEPTH
  MAP_LEVEL
  MONSTERS_SLAIN
  PLAYER
  PLAYER_NAME
  SEASON_ID
}

input darkshuffle_GameWhereInput {
  active: bool
  active_battle_id: u32
  active_battle_idEQ: u32
  active_battle_idGT: u32
  active_battle_idGTE: u32
  active_battle_idIN: [u32]
  active_battle_idLIKE: u32
  active_battle_idLT: u32
  active_battle_idLTE: u32
  active_battle_idNEQ: u32
  active_battle_idNOTIN: [u32]
  active_battle_idNOTLIKE: u32
  game_id: u32
  game_idEQ: u32
  game_idGT: u32
  game_idGTE: u32
  game_idIN: [u32]
  game_idLIKE: u32
  game_idLT: u32
  game_idLTE: u32
  game_idNEQ: u32
  game_idNOTIN: [u32]
  game_idNOTLIKE: u32
  hero_health: u8
  hero_healthEQ: u8
  hero_healthGT: u8
  hero_healthGTE: u8
  hero_healthIN: [u8]
  hero_healthLIKE: u8
  hero_healthLT: u8
  hero_healthLTE: u8
  hero_healthNEQ: u8
  hero_healthNOTIN: [u8]
  hero_healthNOTLIKE: u8
  hero_xp: u16
  hero_xpEQ: u16
  hero_xpGT: u16
  hero_xpGTE: u16
  hero_xpIN: [u16]
  hero_xpLIKE: u16
  hero_xpLT: u16
  hero_xpLTE: u16
  hero_xpNEQ: u16
  hero_xpNOTIN: [u16]
  hero_xpNOTLIKE: u16
  in_battle: bool
  in_draft: bool
  last_node_id: u8
  last_node_idEQ: u8
  last_node_idGT: u8
  last_node_idGTE: u8
  last_node_idIN: [u8]
  last_node_idLIKE: u8
  last_node_idLT: u8
  last_node_idLTE: u8
  last_node_idNEQ: u8
  last_node_idNOTIN: [u8]
  last_node_idNOTLIKE: u8
  map_depth: u8
  map_depthEQ: u8
  map_depthGT: u8
  map_depthGTE: u8
  map_depthIN: [u8]
  map_depthLIKE: u8
  map_depthLT: u8
  map_depthLTE: u8
  map_depthNEQ: u8
  map_depthNOTIN: [u8]
  map_depthNOTLIKE: u8
  map_level: u8
  map_levelEQ: u8
  map_levelGT: u8
  map_levelGTE: u8
  map_levelIN: [u8]
  map_levelLIKE: u8
  map_levelLT: u8
  map_levelLTE: u8
  map_levelNEQ: u8
  map_levelNOTIN: [u8]
  map_levelNOTLIKE: u8
  monsters_slain: u16
  monsters_slainEQ: u16
  monsters_slainGT: u16
  monsters_slainGTE: u16
  monsters_slainIN: [u16]
  monsters_slainLIKE: u16
  monsters_slainLT: u16
  monsters_slainLTE: u16
  monsters_slainNEQ: u16
  monsters_slainNOTIN: [u16]
  monsters_slainNOTLIKE: u16
  player: ContractAddress
  playerEQ: ContractAddress
  playerGT: ContractAddress
  playerGTE: ContractAddress
  playerIN: [ContractAddress]
  playerLIKE: ContractAddress
  playerLT: ContractAddress
  playerLTE: ContractAddress
  playerNEQ: ContractAddress
  playerNOTIN: [ContractAddress]
  playerNOTLIKE: ContractAddress
  player_name: felt252
  player_nameEQ: felt252
  player_nameGT: felt252
  player_nameGTE: felt252
  player_nameIN: [felt252]
  player_nameLIKE: felt252
  player_nameLT: felt252
  player_nameLTE: felt252
  player_nameNEQ: felt252
  player_nameNOTIN: [felt252]
  player_nameNOTLIKE: felt252
  season_id: u32
  season_idEQ: u32
  season_idGT: u32
  season_idGTE: u32
  season_idIN: [u32]
  season_idLIKE: u32
  season_idLT: u32
  season_idLTE: u32
  season_idNEQ: u32
  season_idNOTIN: [u32]
  season_idNOTLIKE: u32
}

type darkshuffle_Leaderboard {
  entity: World__Entity
  eventMessage: World__EventMessage
  player: ContractAddress
  rank: u8
  score: u16
  season_id: u32
}

type darkshuffle_LeaderboardConnection {
  edges: [darkshuffle_LeaderboardEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type darkshuffle_LeaderboardEdge {
  cursor: Cursor
  node: darkshuffle_Leaderboard
}

input darkshuffle_LeaderboardOrder {
  direction: OrderDirection!
  field: darkshuffle_LeaderboardOrderField!
}

enum darkshuffle_LeaderboardOrderField {
  PLAYER
  RANK
  SCORE
  SEASON_ID
}

input darkshuffle_LeaderboardWhereInput {
  player: ContractAddress
  playerEQ: ContractAddress
  playerGT: ContractAddress
  playerGTE: ContractAddress
  playerIN: [ContractAddress]
  playerLIKE: ContractAddress
  playerLT: ContractAddress
  playerLTE: ContractAddress
  playerNEQ: ContractAddress
  playerNOTIN: [ContractAddress]
  playerNOTLIKE: ContractAddress
  rank: u8
  rankEQ: u8
  rankGT: u8
  rankGTE: u8
  rankIN: [u8]
  rankLIKE: u8
  rankLT: u8
  rankLTE: u8
  rankNEQ: u8
  rankNOTIN: [u8]
  rankNOTLIKE: u8
  score: u16
  scoreEQ: u16
  scoreGT: u16
  scoreGTE: u16
  scoreIN: [u16]
  scoreLIKE: u16
  scoreLT: u16
  scoreLTE: u16
  scoreNEQ: u16
  scoreNOTIN: [u16]
  scoreNOTLIKE: u16
  season_id: u32
  season_idEQ: u32
  season_idGT: u32
  season_idGTE: u32
  season_idIN: [u32]
  season_idLIKE: u32
  season_idLT: u32
  season_idLTE: u32
  season_idNEQ: u32
  season_idNOTIN: [u32]
  season_idNOTLIKE: u32
}

type darkshuffle_Map {
  entity: World__Entity
  eventMessage: World__EventMessage
  game_id: u32
  level: u8
  seed: u128
}

type darkshuffle_MapConnection {
  edges: [darkshuffle_MapEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type darkshuffle_MapEdge {
  cursor: Cursor
  node: darkshuffle_Map
}

input darkshuffle_MapOrder {
  direction: OrderDirection!
  field: darkshuffle_MapOrderField!
}

enum darkshuffle_MapOrderField {
  GAME_ID
  LEVEL
  SEED
}

input darkshuffle_MapWhereInput {
  game_id: u32
  game_idEQ: u32
  game_idGT: u32
  game_idGTE: u32
  game_idIN: [u32]
  game_idLIKE: u32
  game_idLT: u32
  game_idLTE: u32
  game_idNEQ: u32
  game_idNOTIN: [u32]
  game_idNOTLIKE: u32
  level: u8
  levelEQ: u8
  levelGT: u8
  levelGTE: u8
  levelIN: [u8]
  levelLIKE: u8
  levelLT: u8
  levelLTE: u8
  levelNEQ: u8
  levelNOTIN: [u8]
  levelNOTLIKE: u8
  seed: u128
  seedEQ: u128
  seedGT: u128
  seedGTE: u128
  seedIN: [u128]
  seedLIKE: u128
  seedLT: u128
  seedLTE: u128
  seedNEQ: u128
  seedNOTIN: [u128]
  seedNOTLIKE: u128
}

type darkshuffle_PlayerReward {
  entity: World__Entity
  eventMessage: World__EventMessage
  player: ContractAddress
  reward: u256
  season_id: u32
}

type darkshuffle_PlayerRewardConnection {
  edges: [darkshuffle_PlayerRewardEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type darkshuffle_PlayerRewardEdge {
  cursor: Cursor
  node: darkshuffle_PlayerReward
}

input darkshuffle_PlayerRewardOrder {
  direction: OrderDirection!
  field: darkshuffle_PlayerRewardOrderField!
}

enum darkshuffle_PlayerRewardOrderField {
  PLAYER
  REWARD
  SEASON_ID
}

input darkshuffle_PlayerRewardWhereInput {
  player: ContractAddress
  playerEQ: ContractAddress
  playerGT: ContractAddress
  playerGTE: ContractAddress
  playerIN: [ContractAddress]
  playerLIKE: ContractAddress
  playerLT: ContractAddress
  playerLTE: ContractAddress
  playerNEQ: ContractAddress
  playerNOTIN: [ContractAddress]
  playerNOTLIKE: ContractAddress
  reward: u256
  rewardEQ: u256
  rewardGT: u256
  rewardGTE: u256
  rewardIN: [u256]
  rewardLIKE: u256
  rewardLT: u256
  rewardLTE: u256
  rewardNEQ: u256
  rewardNOTIN: [u256]
  rewardNOTLIKE: u256
  season_id: u32
  season_idEQ: u32
  season_idGT: u32
  season_idGTE: u32
  season_idIN: [u32]
  season_idLIKE: u32
  season_idLT: u32
  season_idLTE: u32
  season_idNEQ: u32
  season_idNOTIN: [u32]
  season_idNOTLIKE: u32
}

type darkshuffle_Season {
  contract_address: ContractAddress
  end: u64
  entity: World__Entity
  entry_amount: u256
  eventMessage: World__EventMessage
  finalized: bool
  reward_pool: u256
  season_id: u32
  start: u64
}

type darkshuffle_SeasonConnection {
  edges: [darkshuffle_SeasonEdge]
  pageInfo: World__PageInfo!
  totalCount: Int!
}

type darkshuffle_SeasonEdge {
  cursor: Cursor
  node: darkshuffle_Season
}

input darkshuffle_SeasonOrder {
  direction: OrderDirection!
  field: darkshuffle_SeasonOrderField!
}

enum darkshuffle_SeasonOrderField {
  CONTRACT_ADDRESS
  END
  ENTRY_AMOUNT
  FINALIZED
  REWARD_POOL
  SEASON_ID
  START
}

input darkshuffle_SeasonWhereInput {
  contract_address: ContractAddress
  contract_addressEQ: ContractAddress
  contract_addressGT: ContractAddress
  contract_addressGTE: ContractAddress
  contract_addressIN: [ContractAddress]
  contract_addressLIKE: ContractAddress
  contract_addressLT: ContractAddress
  contract_addressLTE: ContractAddress
  contract_addressNEQ: ContractAddress
  contract_addressNOTIN: [ContractAddress]
  contract_addressNOTLIKE: ContractAddress
  end: u64
  endEQ: u64
  endGT: u64
  endGTE: u64
  endIN: [u64]
  endLIKE: u64
  endLT: u64
  endLTE: u64
  endNEQ: u64
  endNOTIN: [u64]
  endNOTLIKE: u64
  entry_amount: u256
  entry_amountEQ: u256
  entry_amountGT: u256
  entry_amountGTE: u256
  entry_amountIN: [u256]
  entry_amountLIKE: u256
  entry_amountLT: u256
  entry_amountLTE: u256
  entry_amountNEQ: u256
  entry_amountNOTIN: [u256]
  entry_amountNOTLIKE: u256
  finalized: bool
  reward_pool: u256
  reward_poolEQ: u256
  reward_poolGT: u256
  reward_poolGTE: u256
  reward_poolIN: [u256]
  reward_poolLIKE: u256
  reward_poolLT: u256
  reward_poolLTE: u256
  reward_poolNEQ: u256
  reward_poolNOTIN: [u256]
  reward_poolNOTLIKE: u256
  season_id: u32
  season_idEQ: u32
  season_idGT: u32
  season_idGTE: u32
  season_idIN: [u32]
  season_idLIKE: u32
  season_idLT: u32
  season_idLTE: u32
  season_idNEQ: u32
  season_idNOTIN: [u32]
  season_idNOTLIKE: u32
  start: u64
  startEQ: u64
  startGT: u64
  startGTE: u64
  startIN: [u64]
  startLIKE: u64
  startLT: u64
  startLTE: u64
  startNEQ: u64
  startNOTIN: [u64]
  startNOTLIKE: u64
}

scalar felt252

scalar u8

scalar u16

scalar u32

scalar u64

scalar u128

scalar u256